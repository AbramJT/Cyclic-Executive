#include <Ticker.h>

#include <B31DGMonitor.h>
Ticker ticker;

B31DGCyclicExecutiveMonitor monitor;


#define FRAME_DURATION_MS 4


int led_1 = 34; //Output port for LED of task 1 
int freq_1 = 32;  //Input port to measure task 2 frequency
int freq_2 = 33;  //Input port to measure task 3 frequency
int poten = 35; //Input port to show analog frequency
int led_2_error = 25; //Output port for LED of task 4

unsigned long frameTime = 0;  //Frame Timer is set
unsigned long frameCounter = 0; //Frame Counter is set

void frame() {
  unsigned int slot = frameCounter % 10;
   
  unsigned long frameTime = millis();
  while ((millis() - frameTime) < FRAME_DURATION_MS) 
  {
    
  }
   switch (slot) {
     case 0: JobTask1();           JobTask3();           break;
     case 1: JobTask1();JobTask2();                      break;
     case 2: JobTask1();           JobTask3();           break;
     case 3: JobTask1();                      JobTask4();break;
     case 4: JobTask1();           JobTask3();           break;
     case 5: JobTask1();JobTask2();                      break;
     case 6: JobTask1();           JobTask3();           break;
     case 7: JobTask1();                      JobTask4();break;
     case 8: JobTask1();           JobTask3();           break;
     case 9: JobTask1();
     
    //Frame count for 10 and thus after 10 frames will reset                                      
  } 
  
  frameCounter++; //Increment

    
}

void setup(void)
{
  monitor.startMonitoring();
  Serial.begin(9600);

  pinMode(led_1, OUTPUT); // Task1, LED 1 output
  pinMode(freq_1, INPUT); // Task2, Frequency input
  pinMode(freq_2, INPUT); // Task3, Frequency input 
  pinMode(poten, INPUT); // Task4, Potentiometer input
  pinMode(led_2_error, OUTPUT); // Task4, LED 2 output
  ticker.attach_ms(4,frame); //Every 4 milli seconds, ticker will call frame
}

void loop(void) //Repeats frame
{

}

//Cyclic executive Task 1, 2, 3, 4, 5

void JobTask1(void) 
{
  monitor.jobStarted(1);
  
  digitalWrite(led_1, HIGH); //High for 200us
  delayMicroseconds(200);
  digitalWrite(led_1, LOW); //Low for 50us
  delayMicroseconds(50);
  digitalWrite(led_1, HIGH); //High for 30us
  delayMicroseconds(30);
  digitalWrite(led_1, LOW); //Low for remaining time period
  
  monitor.jobEnded(1);

  Serial.println("Task 1 Completed"); //End of Task 1
  
} 

void JobTask2(void) 
{
  monitor.jobStarted(2);
  
  int count_1 = 0;

  count_1 = pulseIn(freq_1, HIGH); //Measure the pulse of the input

  count_1 = count_1 *  2;
  float frequency_1 = 1000000.0 / (count_1); //Calculate the frequency 
  frequency_1 = constrain(frequency_1, 333, 1000); //Limit frequency from 333 to 1000
  
  monitor.jobEnded(2);
  Serial.println("Task 2 Completed"); //End of Task 2
  
} 

void JobTask3(void) 
{
  monitor.jobStarted(3);

  int count_2 = 0;
  
  count_2 = pulseIn(freq_2, HIGH); //Measure the pulse of the input

  count_2 = count_2 * 2;
  float frequency_2 = 1000000.0 / (count_2); //Calculate the frequency
  frequency_2 = constrain(frequency_2, 500, 1000); //Limit frequency from 500 to 1000
  
  monitor.jobEnded(3);
  Serial.println("Task 3 Completed"); //End of Task 3

} 

void JobTask4(void) 
{
  monitor.jobStarted(4);
  
  const int max_analog_input = 1023; // 1024 reflect on 10 bits of memory
  const int readings_num = 4; 
  int readings[readings_num]; 
  int array = 0;  // Index of current readings
  int sum = 0;  // The total run
  int filtered_value = 0; // Average of the filtered
  for (int i = 0; i < readings_num; i++) 
  {
  readings[i] = 0;
  }
  
  int analogValue = analogRead(poten);  //Read analog input
  sum = readings[array];  //Minus the old reading from sum
  sum = analogValue; //New reading is now added in the sum
  readings[array] = analogValue; //New reading is now in the array
  array++; //Increment 

  if (array >= readings_num)
  {
    array = 0;
  }
  filtered_value = sum / readings_num;  //Filtered values average
  if (filtered_value > max_analog_input / 2) {    //Filtered value will be greater than half of max range, and thus LED 2 will be HIGH or LOW
    digitalWrite(led_2_error, HIGH);
 
  } else {
    digitalWrite(led_2_error, LOW);
  }
  
  Serial.println(filtered_value);
  
  monitor.jobEnded(4);
  Serial.println("Task 4 Completed"); //End of Task 4
  
}


void JobTask5(void) 
{

  int freq_1 = 0;
  int freq_2 = 0;
  
  freq_1 = pulseIn(freq_1, HIGH) == 0 ? 0 : 1000000 / pulseIn(freq_1, HIGH); //Frequency of Task 2
  freq_1 = map(freq_1, 333, 1000, 0, 99); //Limit and scale Task 2
  freq_2 = pulseIn(freq_2, HIGH) == 0 ? 0 : 1000000 / pulseIn(freq_1, HIGH);  //Frequency of Task 3
  freq_2 = map(freq_2, 500, 1000, 0, 99); //Limit and scale Task 3
  
  Serial.println(freq_1);
  Serial.println(freq_2);
  
  Serial.println("Task 5 Completed"); //End of Task 5

}
